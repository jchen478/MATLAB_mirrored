%% analysis for redispersion - include intensity and cluster analysis
clc;
clear;
close all;

%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Part 0 - definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%
simulation_cases;

basisStrain = 1000;

IData = zeros(nMu,nAtt,nA);
IDataB = zeros(nMu,nAtt);



%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Part I - obtain basis
%%%%%%%%%%%%%%%%%%%%%%%%%%
for i=1:nMu
    for k=1:nAtt
        
        display(['Processing basis mu',num2str(muArr(i)),'_att',num2str(attArr(k))]);
        filePrefix = [dataPath,shape,'_basis_mu',num2str(muArr(i)),'_att',num2str(attArr(k)),'_'];

        %% read input and process data
        % intensity energy statistics
        if (exist([filePrefix,'Intensity.txt'], 'file') ~= 0)
            [I_strain, I] = read_intensity([filePrefix,'Intensity.txt']);
            r = [basisStrain  I_strain(end)]';
            I_stat = interval_average(I_strain,I,r);
            IDataB(i,k) = I_stat(2,1); 
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Part II - obtain redispersed value
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
for i=1:nMu
    for k=1:nAtt
        for j=1:nA
            display(['Processing mu',num2str(muArr(i)),'_att',num2str(attArr(k)),'_a',num2str(aArr(j))])
            filePrefix = [dataPath,shape,'_mu',num2str(muArr(i)),'_att',num2str(attArr(k)),'_a',num2str(aArr(j)),'_'];
            
            %% read input and process data
            [box_strain, sidex] = read_box([filePrefix,'Lbox.txt']);
            
            % define intervals
            r = round(intervals(box_strain,sidex),0);
            
            % intensity energy statistics
            if (exist([filePrefix,'Intensity.txt'], 'file') ~= 0)
                [I_strain, I] = read_intensity([filePrefix,'Intensity.txt']);
                I_stat = interval_average(I_strain,I,r');
                IData(i,k,j) = I_stat(5,1); 
            end
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Part III - calculate property difference due to redispersion cycle
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
DIData = zeros(nMu,nAtt,nA);
IData (IData == 0) = NaN;

for i=1:nA
    DIData(:,:,i) = IData(:,:,i) - IDataB;
end

IDataObj = data3D('$

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Part IV - plotting
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% intensity
plot3dim(DIData,IData,'$\Delta I$','$I$',attC,muC,aC)
plot3dim(DIData,IData,'$\Delta I$','$I$',aC,attC,muC)
plot3dim(DIData,IData,'$\Delta I$','$I$',attC,aC,muC)
plot3dim(DIData,IData,'$\Delta I$','$I$',muC,aC,attC)
plot3dim(DIData,IData,'$\Delta I$','$I$',muC,attC,aC)
plot3dim(DIData,IData,'$\Delta I$','$I$',aC,muC,attC)
